package mbud.hibernate.mapping;

/// default package
// Generated 2016-11-16 16:55:22 by Hibernate Tools 5.2.0.Beta1

import static javax.persistence.GenerationType.IDENTITY;

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import mbud.util.StringUtil;

/**
 * Zamowienie generated by hbm2java
 */
@SuppressWarnings("serial")
@Entity
@Table(name = "zamowienie", catalog = "pogrzebowka")
public class Zamowienie implements java.io.Serializable {

	private Integer id;
	private DomPogrzebowy domPogrzebowy;
	private Klient klient;
	private Pracownik pracownik;
	private Date dataZlozenia;
	private Boolean oplacone;
	private Boolean odebrane;
	private Set<ZamowienieProdukt> produkty = new HashSet<ZamowienieProdukt>(0);

	public Zamowienie() {
	}

	public Zamowienie(DomPogrzebowy domPogrzebowy, Klient klient, Date dataZlozenia) {
		this.domPogrzebowy = domPogrzebowy;
		this.klient = klient;
		this.dataZlozenia = dataZlozenia;
	}

	public Zamowienie(DomPogrzebowy domPogrzebowy, Klient klient, Pracownik pracownik, Date dataZlozenia,
			Boolean oplacone, Boolean odebrane, Set<ZamowienieProdukt> zamowienieProdukts) {
		this.domPogrzebowy = domPogrzebowy;
		this.klient = klient;
		this.pracownik = pracownik;
		this.dataZlozenia = dataZlozenia;
		this.oplacone = oplacone;
		this.odebrane = odebrane;
		this.produkty = zamowienieProdukts;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "id", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_domu", nullable = false)
	public DomPogrzebowy getDomPogrzebowy() {
		return this.domPogrzebowy;
	}

	public void setDomPogrzebowy(DomPogrzebowy domPogrzebowy) {
		this.domPogrzebowy = domPogrzebowy;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_klienta")
	public Klient getKlient() {
		return this.klient;
	}

	public void setKlient(Klient klient) {
		this.klient = klient;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_pracownika")
	public Pracownik getPracownik() {
		return this.pracownik;
	}

	public void setPracownik(Pracownik pracownik) {
		this.pracownik = pracownik;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "data_zlozenia", nullable = false, length = 19)
	public Date getDataZlozenia() {
		return this.dataZlozenia;
	}

	public void setDataZlozenia(Date dataZlozenia) {
		this.dataZlozenia = dataZlozenia;
	}

	@Column(name = "oplacone")
	public Boolean getOplacone() {
		return this.oplacone;
	}

	public void setOplacone(Boolean oplacone) {
		this.oplacone = oplacone;
	}

	@Column(name = "odebrane")
	public Boolean getOdebrane() {
		return this.odebrane;
	}

	public void setOdebrane(Boolean odebrane) {
		this.odebrane = odebrane;
	}

	@OneToMany(fetch = FetchType.EAGER, mappedBy = "id.zamowienie", cascade = CascadeType.ALL)
	public Set<ZamowienieProdukt> getProdukty() {
		return this.produkty;
	}

	public void setProdukty(Set<ZamowienieProdukt> zamowienieProdukts) {
		this.produkty = zamowienieProdukts;
	}
	
	@Transient
	public String getTotalPrice() {
		double price = 0;
		for (ZamowienieProdukt zp : produkty) {
			price += zp.getIlosc() * zp.getId().getProdukt().getCena();
		}
		return StringUtil.formatPrice(price) + " z³";
	}
	
	@Transient
	public String getStatus() {
		if (odebrane) {
			return "ODEBRANE";
		}
		if (oplacone) {
			return "OP£ACONE";
		}
		return "NOWE";
	}
	
	@Transient
	public boolean canBePaid() {
		return (oplacone == null || !oplacone);
	}
	
	@Transient
	public boolean canBeGiven() {
		return (odebrane == null || !odebrane);
	}

}
